# Define SpeciesManager in the global window space as window.SpeciesManager
@SpeciesManager = ->
  # Private variables, functions and backbone objects
  _speciesListView = null
  _seedData = 

  # Redefine the template interpolation character used by underscore to prevent conflicts with rails ERB
  _.templateSettings = {
    evaluate:    /\<\@(.+?)\@\>/g,
    interpolate: /\<\@=(.+?)\@\>/g,
    escape:      /\<\@-(.+?)\@\>/g
};


  # View for selected species shown in the center of the screen
  speciesPopoverView = Backbone.View.extend(
    # Id and class name for popover view
    className: '#popover-inner'
    id: '#popover-inner'
    # Select the underscore template to use, found in view/_map.html.erb
    template: _.template($('#popover-template').html())

    # Define javascript events for popover
    events:
      'click #overlay-close' : 'closeOverlay'
      'click #popover-inner' : 'cancelEvent'
      'click' : 'closeOverlay'

    # Fade out the overlay and set display to none to prevent event hogging
    closeOverlay: ->
      $('#overlay-dark, #popover-outer').removeClass('selected')
      setTimeout ->
        $('#overlay-dark,#popover-outer').css('display', 'none')
        # After we've faded out the popover, remove it from the DOM
        @.remove()
      , 300

    render: ->
      # First render the element from the template and model
      @$el.html @template(@model.toJSON())
      # Set display to block from none
      $('#overlay-dark,#popover-outer').css('display', 'block')
      # After a delay of 50 ms, add the class to allow the CSS transition to kick in at the next render loop
      setTimeout ->
        $('#overlay-dark,#popover-outer').addClass('selected')
      , 50
      this
  )

  # View for species in menu list
  speciesView = Backbone.View.extend(
    # Set class name for generated view
    className: 'list-row'
    # Select the underscore template to use, found in view/_species.html.erb
    template: _.template($('#list-row-template').html())
    # Define javascript events
    events:
      'click': 'showPopover'

    # When clicked, show the central popover with the corresponding data
    showPopover: ->
      popover = new speciesPopoverView({model: @model})
      $('#popover-outer').append(popover.render().el)

    render: ->
      @$el.html @template(@model.toJSON())
      this
  )

  # Model that holds each species
  speciesModel = Backbone.Model.extend({})

  # Collection that holds JSON returned from /species.json
  speciesCollection = Backbone.Collection.extend(
    # Provide a URL to pull JSON data from
    url: '/species.json'
    # Use the species model
    model: speciesModel
  )

  # The outer backbone view for the species list
  speciesListView = Backbone.View.extend(
    el: '#menu-content-list'

    # Define methods to be run at initialization time
    initialize: ->
      # Create a new species collection to hold the data
      @collection = new speciesCollection(_seedData);
      # Whenever a new object is added to the collection, render it's corresponding view
      @collection.bind 'add', @appendItem
      # Call this view's render() function to render all the initial models that might have been added
      @render()

    render: ->
      # For each model in the collection, render and append them to the list view
      _(@collection.models).each (model) ->
        @appendItem model;
      , @

    appendItem: (model) ->
      # Create a new species view based on the model data
      view = new speciesView({model: model})
      # Render the species view in the outer container
      @$el.append(view.render().el)
  )

  # SpeciesManager.initialize() is the only exported member variable, it will initialize the backbone objects, pull data
  # and set up the collection
  initialize: (seedData) ->
    _seedData = seedData
    _speciesListView = new speciesListView()
